//#define STM32L452xx

#include <stdint.h>
#include "stm32l4xx.h"
#include "HAL/GPIO/GPIO.hpp"
#include "HAL/I2C/I2C.hpp"

typedef struct
{
  uint8_t reg_address;
  uint8_t * data;
}to_be_sent_t;

uint8_t Mario_pixel_map[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x6d, 0x6d, 0x6d,
    0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d,
    0x6d, 0x6d, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x6d,
    0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d,
    0x6d, 0x6d, 0x6d, 0x6d, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d,
    0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0xff, 0xff, 0xff, 0xff,
    0x24, 0x24, 0xff, 0xff, 0x00, 0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0xff, 0xff, 0xff, 0xff, 0x24, 0x24, 0xff, 0xff,
    0x00, 0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0xff, 0xff, 0x24, 0x24, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x24, 0x24, 0xff, 0xff, 0xff, 0xff, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x24, 0x24, 0xff, 0xff, 0x24, 0x24, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x24, 0x24, 0xff, 0xff, 0xff, 0xff, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0xff, 0xff,
    0x24, 0x24, 0x24, 0x24, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0x24,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0xff, 0xff, 0x24, 0x24, 0x24, 0x24,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0x24, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x24, 0x24, 0x24, 0x24, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0x24, 0x24,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0x24,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x6d, 0x6d, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x6d, 0x6d,
    0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x6d, 0x6d,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x6d, 0x6d, 0x24, 0x24, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x6d, 0x6d, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x6d, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24,
    0x00, 0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x6d, 0x6d, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x6d, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0xff, 0xff, 0xff, 0xff,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x00, 0x00,
    0x00, 0x00, 0x24, 0x24, 0xff, 0xff, 0xff, 0xff, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x6d, 0x6d, 0x6d, 0x6d,
    0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x6d, 0x6d, 0x6d, 0x6d,
    0x24, 0x24, 0x6d, 0x6d, 0x6d, 0x6d, 0xff, 0xff, 0x6d, 0x6d, 0x6d, 0x6d,
    0xff, 0xff, 0x6d, 0x6d, 0x24, 0x24, 0x24, 0x24, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x00, 0x00, 0x6d, 0x6d, 0x6d, 0x6d, 0x24, 0x24, 0x6d, 0x6d,
    0x6d, 0x6d, 0xff, 0xff, 0x6d, 0x6d, 0x6d, 0x6d, 0xff, 0xff, 0x6d, 0x6d,
    0x24, 0x24, 0x24, 0x24, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x24, 0x24,
    0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d,
    0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x24, 0x24, 0x24, 0x24,
    0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x24, 0x24, 0x6d, 0x6d, 0x6d, 0x6d,
    0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d,
    0x6d, 0x6d, 0x6d, 0x6d, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d,
    0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d,
    0x24, 0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d,
    0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x24, 0x24, 0x24, 0x24,
    0x00, 0x00, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x6d, 0x6d, 0x6d, 0x6d,
    0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d,
    0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00,
    0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x6d, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x6d, 0x6d, 0x6d,
    0x6d, 0x6d, 0x6d, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

uint8_t transfer1[9], trensfer2[9], transfer3[9], transfer4[9];

typedef GPIO<GPIOA_BASE, 9> PA9;
typedef GPIO<GPIOA_BASE, 10> PA10;

typedef GPIO<GPIOB_BASE, 6> PB6;
typedef GPIO<GPIOB_BASE, 7> PB7;
typedef GPIO<GPIOB_BASE, 10> PB10;
typedef GPIO<GPIOB_BASE, 11> PB11;
typedef GPIO<GPIOB_BASE, 14> PB14;
typedef GPIO<GPIOB_BASE, 15> PB15;

typedef GPIO<GPIOC_BASE, 0> PC0;
typedef GPIO<GPIOC_BASE, 1> PC1;
typedef GPIO<GPIOC_BASE, 6> PC6;
typedef GPIO<GPIOC_BASE, 7> PC7;
typedef GPIO<GPIOC_BASE, 8> PC8;
typedef GPIO<GPIOC_BASE, 9> PC9;

typedef I2C<I2C1_BASE> I2C_1;
typedef I2C<I2C2_BASE> I2C_2;
typedef I2C<I2C3_BASE> I2C_3;
typedef I2C<I2C4_BASE> I2C_4;

inline void HC595ToggleClk() {
	GPIOC->BRR = (1 << 8);
	asm("nop");
	GPIOC->BSRR = (1 << 8);
}

inline void HC595TriggerOutput() {
	GPIOC->BSRR = (1 << 9);
	asm("nop");
	GPIOC->BRR = (1 << 9);
}

void GPIO_Init(void) {
	/* Clock enable */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // Enable clock for GPIOA
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN; // Enable clock for GPIOB
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN; // Enable clock for GPIOC

	/* Set I2C Pins */

	/* I2C1 SCL PA9 */
	PA9::set_as_I2C_pin(eAF4);

	/* I2C1 SDA PA10 */
	PA10::set_as_I2C_pin(eAF4);

	/* I2C2 SCL PB10 */
	PB10::set_as_I2C_pin(eAF4);

	/* I2C2 SDA PB11 */
	PB11::set_as_I2C_pin(eAF4);
	/* I2C3 SCL PC0 */
	PC0::set_as_I2C_pin(eAF4);

	/* I2C3 SDA PC1 */
	PC1::set_as_I2C_pin(eAF4);

	/* I2C4 SCL PB6 */
	PB6::set_as_I2C_pin(eAF5);

	/* I2C4 SDA PB7 */
	PB7::set_as_I2C_pin(eAF5);

	/* HC595 Pins */

	/* Reset PB15 */
	PB15::set_mode(eOutput);
	PB15::set_speed(eVeryHighSpeed);

	/* OutputEnable PB14 */
	PB14::set_mode(eOutput);
	PB14::set_speed(eVeryHighSpeed);

	/* I2C Reset PC6 */
	PC6::set_mode(eOutput);
	PC6::set_speed(eVeryHighSpeed);

	/* DataIn PC7 */
	PC7::set_mode(eOutput);
	PC7::set_speed(eVeryHighSpeed);

	/* Clock PC8 */
	PC8::set_mode(eOutput);
	PC8::set_speed(eVeryHighSpeed);

	/* Latch PC9 */
	PC9::set_mode(eOutput);
	PC9::set_speed(eVeryHighSpeed);

}

void Clock_Init(void) {
	// M = 1
	// N = 10
	// R = 2
	// P = 7
	// Q = 2

//	while((RCC->CR & RCC_CR_PLLRDY) == 0);

	FLASH->ACR |= FLASH_ACR_LATENCY_4WS; // Latency set to 4 wait states
	FLASH->ACR |= FLASH_ACR_PRFTEN; // Prefetch enable
	FLASH->ACR |= FLASH_ACR_DCEN; // Data cashe enable
	FLASH->ACR |= FLASH_ACR_ICEN; // Instruction cashe enable

	RCC->CR |= RCC_CR_HSION;

	while ((RCC->CR & RCC_CR_HSIRDY) == 0)
		;

	RCC->PLLCFGR = (2 << 0) | (10 << 8) | (1 << 24);

	RCC->CR |= RCC_CR_PLLON; // HSI turned on

	while ((RCC->CR & RCC_CR_PLLRDY) == 0)
		;

	RCC->CFGR |= (3 << 0);

}

void I2C_Init(void) {

	RCC->CCIPR |= RCC_CCIPR_I2C1SEL_0;
	RCC->CCIPR |= RCC_CCIPR_I2C2SEL_0;
	RCC->CCIPR |= RCC_CCIPR_I2C3SEL_0;
	RCC->CCIPR2 |= RCC_CCIPR2_I2C4SEL_0;

	/* Clock enable */
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN; //Enable clock for I2C1
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN; //Enable clock for I2C2
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C3EN; //Enable clock for I2C3
	RCC->APB1ENR2 |= RCC_APB1ENR2_I2C4EN; //Enable clock for I2C4

	/* Fast-mode Plus enable */
	SYSCFG->CFGR1 |= SYSCFG_CFGR1_I2C1_FMP; //Enable FM+ for I2C1
	SYSCFG->CFGR1 |= SYSCFG_CFGR1_I2C2_FMP; //Enable FM+ for I2C2
	SYSCFG->CFGR1 |= SYSCFG_CFGR1_I2C3_FMP; //Enable FM+ for I2C3
	SYSCFG->CFGR1 |= SYSCFG_CFGR1_I2C4_FMP; //Enable FM+ for I2C4

	SYSCFG->CFGR1 |= SYSCFG_CFGR1_I2C_PB6_FMP | // Enable FM+ on PB6
			SYSCFG_CFGR1_I2C_PB7_FMP;  // Enable FM+ on PB7

	/* I2C set timing*/
	I2C_1::set_timing(0, 7, 0, 41, 145);
  I2C_2::set_timing(0, 7, 0, 41, 145);
  I2C_3::set_timing(0, 7, 0, 41, 145);
  I2C_4::set_timing(0, 7, 0, 41, 145);

	/* I2C periphery enable */
  I2C_1::enable();
  I2C_2::enable();
  I2C_3::enable();
  I2C_4::enable();
}


int main(void) {

	Clock_Init();

	SystemCoreClockUpdate();

	uint8_t sent;

//	RCC->APB1ENR1 |= (1 << 28);
//
//	RCC->APB2ENR |= (1 << 0);

	GPIO_Init();
	I2C_Init();

	typedef GPIO<GPIOB_BASE, 13> PB13;

	PB13::set_mode(eOutput);
	PB13::set_speed(eVeryHighSpeed);

	uint8_t dat = 0xff;
	uint8_t data[] = { 0x82, 125, 125, 125, 125, 125, 125, 125, 125, 0xff, 0x00,
			0b10101010, 0b10101010 };
	uint8_t data1[] = { 0x80, 0, 0x08 };

	for (uint32_t i = 0; i < 0xffff; i++) {
		;
	}

	PB14::set_output_value(eLow);
	PB15::set_output_value(eLow);
	PC7::set_output_value(eLow);
	PC8::set_output_value(eLow);
	PC9::set_output_value(eLow);


	for (uint32_t i = 0; i < 0xffff; i++) {
		;
	}

	PB15::set_output_value(eHigh);
	PC6::set_output_value(eLow);
	PC7::set_output_value(eHigh);

	for (uint8_t i = 0; i < 32; i++) {
	  PC8::set_output_low();
		for (uint32_t i = 0; i < 0xffff; i++) {
			;
		}
		PC8::set_output_high();
		for (uint32_t i = 0; i < 0xffff; i++) {
			;
		}
	}

	PC9::set_output_high();
	PC6::set_output_high();

	for (uint32_t i = 0; i < 0xffff; i++) {
		;
	}

	I2C_1::set_slave_address(0x40>>1, e7bitAddress);
	I2C_1::write_data(data1, 3);

  I2C_2::set_slave_address(0x42>>1, e7bitAddress);
  I2C_2::write_data(data1, 3);

  I2C_3::set_slave_address(0x44>>1, e7bitAddress);
  I2C_3::write_data(data1, 3);

  I2C_4::set_slave_address(0x46>>1, e7bitAddress);
  I2C_4::write_data(data1, 3);

  I2C_1::write_data(data, 13);
  I2C_2::write_data(data, 13);
  I2C_3::write_data(data, 13);
  I2C_4::write_data(data, 13);

  uint8_t current_line = 0;

  PB14::set_output_low();

	for (;;) {
		if (sent == 32) {
		  PC7::set_output_low();
			sent = 0;
		} else
      PC7::set_output_high();

	  I2C_1::write_data(data, 13);
	  I2C_2::write_data(data, 13);
	  I2C_3::write_data(data, 13);
	  I2C_4::write_data(data, 13);

		PB13::toogle_output_value();

		sent++;

		HC595ToggleClk();
		HC595TriggerOutput();

		for (uint32_t i = 0; i < 0xfffff; i++)
			;

	}

	return 0;
}
